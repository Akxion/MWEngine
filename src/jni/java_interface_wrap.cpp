/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "native_audio_engine_api.h"
#include "sequencer_api.h"
#include "audiochannel.h"
#include "bitcrusher.h"
#include "baseprocessor.h"
#include "basebusprocessor.h"
#include "bulkcacher.h"
#include "compressor.h"
#include "decimator.h"
#include "sampleevent.h"
#include "delay.h"
#include "drumevent.h"
#include "drumpattern.h"
#include "druminstrument.h"
#include "filter.h"
#include "fm.h"
#include "formant_filter.h"
#include "lfo.h"
#include "phaser.h"
#include "pitchshifter.h"
#include "processingchain.h"
#include "routeable_oscillator.h"
#include "samplemanager.h"
#include "synthinstrument.h"
#include "synthevent.h"
#include "waveshaper.h"


static int *new_int_array(int nelements) { 
  return new int[nelements]; 
}

static void delete_int_array(int *ary) { 
  delete [] ary; 
}

static int int_array_getitem(int *ary, int index) {
    return ary[index];
}
static void int_array_setitem(int *ary, int index, int value) {
    ary[index] = value;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1int_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int *)new_int_array(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1int_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  delete_int_array(arg1);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_int_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)int_array_getitem(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_int_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  int_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  init();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_start(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  start();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_stop(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  stop();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_reset(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  reset();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1SequencerAPI(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SequencerAPI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SequencerAPI *)new SequencerAPI();
  *(SequencerAPI **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1SequencerAPI(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SequencerAPI *arg1 = (SequencerAPI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SequencerAPI **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SequencerAPI_1prepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloat jarg4, jint jarg5, jint jarg6) {
  SequencerAPI *arg1 = (SequencerAPI *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerAPI **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4;
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->prepare(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SequencerAPI_1setLoopPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  SequencerAPI *arg1 = (SequencerAPI *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerAPI **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setLoopPoint(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SequencerAPI_1updateMeasures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  SequencerAPI *arg1 = (SequencerAPI *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerAPI **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->updateMeasures(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SequencerAPI_1setTempo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jint jarg3, jint jarg4) {
  SequencerAPI *arg1 = (SequencerAPI *) 0 ;
  float arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerAPI **)&jarg1; 
  arg2 = (float)jarg2;
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setTempo(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SequencerAPI_1setTempoNow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jint jarg3, jint jarg4) {
  SequencerAPI *arg1 = (SequencerAPI *) 0 ;
  float arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerAPI **)&jarg1; 
  arg2 = (float)jarg2;
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setTempoNow(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SequencerAPI_1setVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SequencerAPI *arg1 = (SequencerAPI *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerAPI **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setVolume(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SequencerAPI_1setPlaying(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SequencerAPI *arg1 = (SequencerAPI *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerAPI **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPlaying(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SequencerAPI_1rewind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SequencerAPI *arg1 = (SequencerAPI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerAPI **)&jarg1; 
  (arg1)->rewind();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SequencerAPI_1setActiveDrumPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SequencerAPI *arg1 = (SequencerAPI *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerAPI **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setActiveDrumPattern(arg2);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SequencerAPI_1getBulkCacher(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SequencerAPI *arg1 = (SequencerAPI *) 0 ;
  BulkCacher *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerAPI **)&jarg1; 
  result = (BulkCacher *)(arg1)->getBulkCacher();
  *(BulkCacher **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SequencerAPI_1cacheAudioEventsForMeasure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SequencerAPI *arg1 = (SequencerAPI *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerAPI **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->cacheAudioEventsForMeasure(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SequencerAPI_1setBounceState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jstring jarg4) {
  SequencerAPI *arg1 = (SequencerAPI *) 0 ;
  bool arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerAPI **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->setBounceState(arg2,arg3,arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SequencerAPI_1setRecordingState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jstring jarg4) {
  SequencerAPI *arg1 = (SequencerAPI *) 0 ;
  bool arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerAPI **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->setRecordingState(arg2,arg3,arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1AudioChannel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  AudioChannel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  result = (AudioChannel *)new AudioChannel(arg1,arg2);
  *(AudioChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1AudioChannel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jint jarg3) {
  jlong jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  int arg3 ;
  AudioChannel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  arg3 = (int)jarg3; 
  result = (AudioChannel *)new AudioChannel(arg1,arg2,arg3);
  *(AudioChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1AudioChannel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AudioChannel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_AudioChannel_1audioEvents_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  std::vector< BaseAudioEvent * > *arg2 = (std::vector< BaseAudioEvent * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = *(std::vector< BaseAudioEvent * > **)&jarg2; 
  if (arg1) (arg1)->audioEvents = *arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_AudioChannel_1audioEvents_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  std::vector< BaseAudioEvent * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (std::vector< BaseAudioEvent * > *)& ((arg1)->audioEvents);
  *(std::vector< BaseAudioEvent * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_AudioChannel_1liveEvents_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  std::vector< BaseAudioEvent * > *arg2 = (std::vector< BaseAudioEvent * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = *(std::vector< BaseAudioEvent * > **)&jarg2; 
  if (arg1) (arg1)->liveEvents = *arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_AudioChannel_1liveEvents_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  std::vector< BaseAudioEvent * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (std::vector< BaseAudioEvent * > *)& ((arg1)->liveEvents);
  *(std::vector< BaseAudioEvent * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_AudioChannel_1hasLiveEvents_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasLiveEvents = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_AudioChannel_1hasLiveEvents_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (bool) ((arg1)->hasLiveEvents);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_AudioChannel_1processingChain_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  ProcessingChain *arg2 = (ProcessingChain *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = *(ProcessingChain **)&jarg2; 
  if (arg1) (arg1)->processingChain = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_AudioChannel_1processingChain_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  ProcessingChain *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (ProcessingChain *) ((arg1)->processingChain);
  *(ProcessingChain **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_AudioChannel_1mixVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->mixVolume = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_AudioChannel_1mixVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (float) ((arg1)->mixVolume);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_AudioChannel_1addEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  BaseAudioEvent *arg2 = (BaseAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = *(BaseAudioEvent **)&jarg2; 
  (arg1)->addEvent(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_AudioChannel_1addLiveEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  BaseAudioEvent *arg2 = (BaseAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = *(BaseAudioEvent **)&jarg2; 
  (arg1)->addLiveEvent(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_AudioChannel_1maxBufferPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxBufferPosition = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_AudioChannel_1maxBufferPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (int) ((arg1)->maxBufferPosition);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_AudioChannel_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1BaseAudioEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BaseAudioEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BaseAudioEvent *)new BaseAudioEvent();
  *(BaseAudioEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1BaseAudioEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BaseAudioEvent_1getBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (float *)(arg1)->getBuffer();
  *(float **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BaseAudioEvent_1synthesize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float *)(arg1)->synthesize(arg2);
  *(float **)&jresult = result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BaseAudioEvent_1getSampleLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (int)(arg1)->getSampleLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BaseAudioEvent_1getSampleStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (int)(arg1)->getSampleStart();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BaseAudioEvent_1getSampleEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (int)(arg1)->getSampleEnd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BaseAudioEvent_1deletable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (bool)(arg1)->deletable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BaseAudioEvent_1setDeletable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDeletable(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BaseAudioEvent_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  (arg1)->lock();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BaseAudioEvent_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BaseAudioEvent_1isLocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (bool)(arg1)->isLocked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BaseAudioEvent_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  (arg1)->destroy();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1BaseCacheableAudioEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BaseCacheableAudioEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BaseCacheableAudioEvent *)new BaseCacheableAudioEvent();
  *(BaseCacheableAudioEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1BaseCacheableAudioEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BaseCacheableAudioEvent *arg1 = (BaseCacheableAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BaseCacheableAudioEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BaseCacheableAudioEvent_1setAutoCache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BaseCacheableAudioEvent *arg1 = (BaseCacheableAudioEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseCacheableAudioEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoCache(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BaseCacheableAudioEvent_1cache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BaseCacheableAudioEvent *arg1 = (BaseCacheableAudioEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseCacheableAudioEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->cache(arg2);
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BaseCacheableAudioEvent_1isCached(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BaseCacheableAudioEvent *arg1 = (BaseCacheableAudioEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseCacheableAudioEvent **)&jarg1; 
  result = (bool)(arg1)->isCached();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BaseCacheableAudioEvent_1setBulkCacheable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BaseCacheableAudioEvent *arg1 = (BaseCacheableAudioEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseCacheableAudioEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setBulkCacheable(arg2);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1BaseProcessor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BaseProcessor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BaseProcessor *)new BaseProcessor();
  *(BaseProcessor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1BaseProcessor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BaseProcessor *arg1 = (BaseProcessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BaseProcessor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BaseProcessor_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  BaseProcessor *arg1 = (BaseProcessor *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseProcessor **)&jarg1; 
  arg2 = *(float **)&jarg2;
  arg3 = (int)jarg3; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1BaseBusProcessor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BaseBusProcessor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BaseBusProcessor *)new BaseBusProcessor();
  *(BaseBusProcessor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1BaseBusProcessor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BaseBusProcessor *arg1 = (BaseBusProcessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BaseBusProcessor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BaseBusProcessor_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  BaseBusProcessor *arg1 = (BaseBusProcessor *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseBusProcessor **)&jarg1; 
  arg2 = *(float **)&jarg2;
  arg3 = (int)jarg3; 
  (arg1)->apply(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1BitCrusher(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  BitCrusher *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  result = (BitCrusher *)new BitCrusher(arg1,arg2);
  *(BitCrusher **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BitCrusher_1getAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BitCrusher **)&jarg1; 
  result = (float)(arg1)->getAmount();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BitCrusher_1setAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BitCrusher **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setAmount(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BitCrusher_1getLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BitCrusher **)&jarg1; 
  result = (float)(arg1)->getLevel();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BitCrusher_1setLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BitCrusher **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setLevel(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BitCrusher_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BitCrusher **)&jarg1; 
  arg2 = *(float **)&jarg2;
  arg3 = (int)jarg3; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1BitCrusher(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BitCrusher **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1BulkCacher(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  BulkCacher *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (BulkCacher *)new BulkCacher(arg1);
  *(BulkCacher **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1BulkCacher(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BulkCacher *arg1 = (BulkCacher *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BulkCacher **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BulkCacher_1addToQueue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  BulkCacher *arg1 = (BulkCacher *) 0 ;
  std::vector< BaseCacheableAudioEvent * > *arg2 = (std::vector< BaseCacheableAudioEvent * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BulkCacher **)&jarg1; 
  arg2 = *(std::vector< BaseCacheableAudioEvent * > **)&jarg2; 
  (arg1)->addToQueue(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BulkCacher_1addToQueue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BulkCacher *arg1 = (BulkCacher *) 0 ;
  BaseCacheableAudioEvent *arg2 = (BaseCacheableAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BulkCacher **)&jarg1; 
  arg2 = *(BaseCacheableAudioEvent **)&jarg2; 
  (arg1)->addToQueue(arg2);
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BulkCacher_1removeFromQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BulkCacher *arg1 = (BulkCacher *) 0 ;
  BaseCacheableAudioEvent *arg2 = (BaseCacheableAudioEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BulkCacher **)&jarg1; 
  arg2 = *(BaseCacheableAudioEvent **)&jarg2; 
  result = (bool)(arg1)->removeFromQueue(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BulkCacher_1hasQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BulkCacher *arg1 = (BulkCacher *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BulkCacher **)&jarg1; 
  result = (bool)(arg1)->hasQueue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BulkCacher_1cacheQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BulkCacher *arg1 = (BulkCacher *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BulkCacher **)&jarg1; 
  (arg1)->cacheQueue();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BulkCacher_1clearQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BulkCacher *arg1 = (BulkCacher *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BulkCacher **)&jarg1; 
  (arg1)->clearQueue();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1Compressor(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Compressor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  result = (Compressor *)new Compressor(arg1,arg2,arg3,arg4);
  *(Compressor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1Compressor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Compressor *arg1 = (Compressor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Compressor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Compressor_1THRESHOLD_1MAX_1NEGATIVE_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Compressor::THRESHOLD_MAX_NEGATIVE_VALUE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Compressor_1THRESHOLD_1MAX_1POSITIVE_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Compressor::THRESHOLD_MAX_POSITIVE_VALUE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Compressor_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  Compressor *arg1 = (Compressor *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compressor **)&jarg1; 
  arg2 = *(float **)&jarg2;
  arg3 = (int)jarg3; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Compressor_1getAttack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Compressor *arg1 = (Compressor *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compressor **)&jarg1; 
  result = (float)(arg1)->getAttack();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Compressor_1setAttack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Compressor *arg1 = (Compressor *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compressor **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setAttack(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Compressor_1getRelease(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Compressor *arg1 = (Compressor *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compressor **)&jarg1; 
  result = (float)(arg1)->getRelease();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Compressor_1setRelease(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Compressor *arg1 = (Compressor *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compressor **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setRelease(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Compressor_1getThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Compressor *arg1 = (Compressor *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compressor **)&jarg1; 
  result = (float)(arg1)->getThreshold();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Compressor_1setThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Compressor *arg1 = (Compressor *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compressor **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setThreshold(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Compressor_1getRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Compressor *arg1 = (Compressor *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compressor **)&jarg1; 
  result = (float)(arg1)->getRatio();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Compressor_1setRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Compressor *arg1 = (Compressor *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compressor **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setRatio(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Compressor_1setSampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Compressor *arg1 = (Compressor *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Compressor **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSampleRate(arg2);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1Decimator(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  float arg2 ;
  Decimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2;
  result = (Decimator *)new Decimator(arg1,arg2);
  *(Decimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Decimator_1getBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Decimator *arg1 = (Decimator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Decimator **)&jarg1; 
  result = (int)(arg1)->getBits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Decimator_1setBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Decimator *arg1 = (Decimator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Decimator **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setBits(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Decimator_1getRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Decimator *arg1 = (Decimator *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Decimator **)&jarg1; 
  result = (float)(arg1)->getRate();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Decimator_1setRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Decimator *arg1 = (Decimator *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Decimator **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setRate(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Decimator_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  Decimator *arg1 = (Decimator *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Decimator **)&jarg1; 
  arg2 = *(float **)&jarg2;
  arg3 = (int)jarg3; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1Decimator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Decimator *arg1 = (Decimator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Decimator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1SampleEvent_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SampleEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SampleEvent *)new SampleEvent();
  *(SampleEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1SampleEvent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  SampleEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (SampleEvent *)new SampleEvent(arg1);
  *(SampleEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1SampleEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleEvent_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->position = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleEvent_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  result = (int) ((arg1)->position);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleEvent_1getSampleLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  result = (int)(arg1)->getSampleLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleEvent_1getSampleStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  result = (int)(arg1)->getSampleStart();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleEvent_1getSampleEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  result = (int)(arg1)->getSampleEnd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleEvent_1deletable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  result = (bool)(arg1)->deletable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleEvent_1setDeletable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDeletable(arg2);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleEvent_1getBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  result = (float *)(arg1)->getBuffer();
  *(float **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleEvent_1synthesize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float *)(arg1)->synthesize(arg2);
  *(float **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleEvent_1isCached(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  result = (bool)(arg1)->isCached();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleEvent_1setAutoCache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoCache(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleEvent_1cache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->cache(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleEvent_1setSample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  arg2 = *(float **)&jarg2;
  arg3 = (int)jarg3; 
  (arg1)->setSample(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1DrumEvent(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  DrumInstrument *arg3 = (DrumInstrument *) 0 ;
  DrumEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(DrumInstrument **)&jarg3; 
  result = (DrumEvent *)new DrumEvent(arg1,arg2,arg3);
  *(DrumEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1DrumEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DrumEvent *arg1 = (DrumEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DrumEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumEvent_1getTimbre(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DrumEvent *arg1 = (DrumEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumEvent **)&jarg1; 
  result = (int)(arg1)->getTimbre();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumEvent_1setTimbre(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumEvent *arg1 = (DrumEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setTimbre(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumEvent_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DrumEvent *arg1 = (DrumEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumEvent **)&jarg1; 
  result = (int)(arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumEvent_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumEvent *arg1 = (DrumEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumEvent_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DrumEvent *arg1 = (DrumEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumEvent **)&jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1DrumInstrument(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DrumInstrument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DrumInstrument *)new DrumInstrument();
  *(DrumInstrument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1DrumInstrument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DrumInstrument **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumInstrument_1volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->volume = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumInstrument_1volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  result = (float) ((arg1)->volume);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumInstrument_1drumTimbre_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->drumTimbre = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumInstrument_1drumTimbre_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  result = (int) ((arg1)->drumTimbre);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumInstrument_1processingChain_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  ProcessingChain *arg2 = (ProcessingChain *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DrumInstrument **)&jarg1; 
  arg2 = *(ProcessingChain **)&jarg2; 
  if (arg1) (arg1)->processingChain = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumInstrument_1processingChain_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  ProcessingChain *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  result = (ProcessingChain *) ((arg1)->processingChain);
  *(ProcessingChain **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumInstrument_1rOsc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  RouteableOscillator *arg2 = (RouteableOscillator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DrumInstrument **)&jarg1; 
  arg2 = *(RouteableOscillator **)&jarg2; 
  if (arg1) (arg1)->rOsc = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumInstrument_1rOsc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  RouteableOscillator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  result = (RouteableOscillator *) ((arg1)->rOsc);
  *(RouteableOscillator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumInstrument_1audioChannel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  AudioChannel *arg2 = (AudioChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DrumInstrument **)&jarg1; 
  arg2 = *(AudioChannel **)&jarg2; 
  if (arg1) (arg1)->audioChannel = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumInstrument_1audioChannel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  AudioChannel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  result = (AudioChannel *) ((arg1)->audioChannel);
  *(AudioChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1DrumPattern(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  DrumPattern *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (DrumPattern *)new DrumPattern(arg1);
  *(DrumPattern **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1DrumPattern(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DrumPattern **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1num_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1num_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (int) ((arg1)->num);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1eventAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->eventAmount = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1eventAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (int) ((arg1)->eventAmount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1audioEvents_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  std::vector< DrumEvent * > *arg2 = (std::vector< DrumEvent * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = *(std::vector< DrumEvent * > **)&jarg2; 
  if (arg1) (arg1)->audioEvents = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1audioEvents_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  std::vector< DrumEvent * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (std::vector< DrumEvent * > *) ((arg1)->audioEvents);
  *(std::vector< DrumEvent * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1updateTimbre(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->updateTimbre(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1cacheEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  DrumInstrument *arg2 = (DrumInstrument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = *(DrumInstrument **)&jarg2; 
  (arg1)->cacheEvents(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1addDrumEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int arg2 ;
  int arg3 ;
  DrumInstrument *arg4 = (DrumInstrument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(DrumInstrument **)&jarg4; 
  (arg1)->addDrumEvent(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1removeDrumEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->removeDrumEvent(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  (arg1)->destroy();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1kickPatternLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->kickPatternLength = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1kickPatternLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (int) ((arg1)->kickPatternLength);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1snarePatternLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->snarePatternLength = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1snarePatternLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (int) ((arg1)->snarePatternLength);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1stickPatternLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->stickPatternLength = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1stickPatternLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (int) ((arg1)->stickPatternLength);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1hatPatternLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hatPatternLength = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1hatPatternLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (int) ((arg1)->hatPatternLength);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1getKickPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (int *)(arg1)->getKickPattern();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1getSnarePattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (int *)(arg1)->getSnarePattern();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1getStickPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (int *)(arg1)->getStickPattern();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1getHatPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (int *)(arg1)->getHatPattern();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1setKickPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setKickPattern(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1setSnarePattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setSnarePattern(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1setStickPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setStickPattern(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumPattern_1setHatPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setHatPattern(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1Delay(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Delay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  result = (Delay *)new Delay(arg1,arg2,arg3,arg4);
  *(Delay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1Delay(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Delay *arg1 = (Delay *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Delay **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Delay_1getDelayTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Delay *arg1 = (Delay *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  result = (float)(arg1)->getDelayTime();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Delay_1setDelayTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Delay *arg1 = (Delay *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setDelayTime(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Delay_1getMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Delay *arg1 = (Delay *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  result = (float)(arg1)->getMix();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Delay_1setMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Delay *arg1 = (Delay *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setMix(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Delay_1getFeedback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Delay *arg1 = (Delay *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  result = (float)(arg1)->getFeedback();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Delay_1setFeedback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Delay *arg1 = (Delay *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setFeedback(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Delay_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  Delay *arg1 = (Delay *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  arg2 = *(float **)&jarg2;
  arg3 = (int)jarg3; 
  (arg1)->apply(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Delay_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Delay *arg1 = (Delay *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1Filter(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  result = (Filter *)new Filter(arg1,arg2,arg3,arg4,arg5);
  *(Filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1Filter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Filter *arg1 = (Filter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Filter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Filter_1setCutoff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Filter *arg1 = (Filter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setCutoff(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Filter_1getCutoff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Filter *arg1 = (Filter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  result = (float)(arg1)->getCutoff();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Filter_1setResonance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Filter *arg1 = (Filter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setResonance(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Filter_1getResonance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Filter *arg1 = (Filter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  result = (float)(arg1)->getResonance();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Filter_1hasLFO_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Filter *arg1 = (Filter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  result = (bool)(arg1)->hasLFO();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Filter_1hasLFO_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Filter *arg1 = (Filter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->hasLFO(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Filter_1getLFO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Filter *arg1 = (Filter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  result = (float)(arg1)->getLFO();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Filter_1setLFO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Filter *arg1 = (Filter *) 0 ;
  LFO *arg2 = (LFO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Filter **)&jarg1; 
  arg2 = *(LFO **)&jarg2; 
  (arg1)->setLFO(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Filter_1setLFORate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Filter *arg1 = (Filter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setLFORate(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Filter_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  Filter *arg1 = (Filter *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  arg2 = *(float **)&jarg2;
  arg3 = (int)jarg3; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1LFO(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LFO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (LFO *)new LFO();
  *(LFO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1LFO(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LFO *arg1 = (LFO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LFO **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_LFO_1MAX_1LFO_1RATE_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)LFO::MAX_LFO_RATE;
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_LFO_1MIN_1LFO_1RATE_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)LFO::MIN_LFO_RATE;
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_LFO_1getRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  LFO *arg1 = (LFO *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LFO **)&jarg1; 
  result = (float)(arg1)->getRate();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_LFO_1setRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  LFO *arg1 = (LFO *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LFO **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setRate(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_LFO_1getWave(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  LFO *arg1 = (LFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LFO **)&jarg1; 
  result = (int)(arg1)->getWave();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_LFO_1setWave(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  LFO *arg1 = (LFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LFO **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setWave(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_LFO_1generate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  LFO *arg1 = (LFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LFO **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->generate(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_LFO_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  LFO *arg1 = (LFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LFO **)&jarg1; 
  result = (int)(arg1)->getLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_LFO_1setLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  LFO *arg1 = (LFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LFO **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLength(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_LFO_1peek(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  LFO *arg1 = (LFO *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LFO **)&jarg1; 
  result = (float)(arg1)->peek();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1FrequencyModulator(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  float arg2 ;
  FrequencyModulator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2;
  result = (FrequencyModulator *)new FrequencyModulator(arg1,arg2);
  *(FrequencyModulator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_FrequencyModulator_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  FrequencyModulator *arg1 = (FrequencyModulator *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FrequencyModulator **)&jarg1; 
  arg2 = *(float **)&jarg2;
  arg3 = (int)jarg3; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_FrequencyModulator_1getRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FrequencyModulator *arg1 = (FrequencyModulator *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FrequencyModulator **)&jarg1; 
  result = (float)(arg1)->getRate();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_FrequencyModulator_1setRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FrequencyModulator *arg1 = (FrequencyModulator *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FrequencyModulator **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setRate(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_FrequencyModulator_1getWave(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FrequencyModulator *arg1 = (FrequencyModulator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FrequencyModulator **)&jarg1; 
  result = (int)(arg1)->getWave();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_FrequencyModulator_1setWave(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FrequencyModulator *arg1 = (FrequencyModulator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FrequencyModulator **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setWave(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_FrequencyModulator_1generate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FrequencyModulator *arg1 = (FrequencyModulator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FrequencyModulator **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->generate(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_FrequencyModulator_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FrequencyModulator *arg1 = (FrequencyModulator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FrequencyModulator **)&jarg1; 
  result = (int)(arg1)->getLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_FrequencyModulator_1setLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FrequencyModulator *arg1 = (FrequencyModulator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FrequencyModulator **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLength(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1FrequencyModulator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FrequencyModulator *arg1 = (FrequencyModulator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FrequencyModulator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1FormantFilter(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  FormantFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1;
  result = (FormantFilter *)new FormantFilter(arg1);
  *(FormantFilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1FormantFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FormantFilter *arg1 = (FormantFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FormantFilter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_FormantFilter_1setVowel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FormantFilter *arg1 = (FormantFilter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FormantFilter **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setVowel(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_FormantFilter_1getVowel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FormantFilter *arg1 = (FormantFilter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FormantFilter **)&jarg1; 
  result = (float)(arg1)->getVowel();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_FormantFilter_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  FormantFilter *arg1 = (FormantFilter *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FormantFilter **)&jarg1; 
  arg2 = *(float **)&jarg2;
  arg3 = (int)jarg3; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_FormantFilter_1VOWEL_1A_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)FormantFilter::VOWEL_A;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_FormantFilter_1VOWEL_1E_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)FormantFilter::VOWEL_E;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_FormantFilter_1VOWEL_1I_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)FormantFilter::VOWEL_I;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_FormantFilter_1VOWEL_1O_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)FormantFilter::VOWEL_O;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_FormantFilter_1VOWEL_1U_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)FormantFilter::VOWEL_U;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1AllPassDelay(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AllPassDelay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AllPassDelay *)new AllPassDelay();
  *(AllPassDelay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_AllPassDelay_1delay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  AllPassDelay *arg1 = (AllPassDelay *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AllPassDelay **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->delay(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_AllPassDelay_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jfloat jresult = 0 ;
  AllPassDelay *arg1 = (AllPassDelay *) 0 ;
  float arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AllPassDelay **)&jarg1; 
  arg2 = (float)jarg2;
  result = (float)(arg1)->update(arg2);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1AllPassDelay(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AllPassDelay *arg1 = (AllPassDelay *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AllPassDelay **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1Phaser(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Phaser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  result = (Phaser *)new Phaser(arg1,arg2,arg3,arg4,arg5);
  *(Phaser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1Phaser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Phaser *arg1 = (Phaser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Phaser **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Phaser_1setDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Phaser *arg1 = (Phaser *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Phaser **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setDepth(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Phaser_1getDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Phaser *arg1 = (Phaser *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Phaser **)&jarg1; 
  result = (float)(arg1)->getDepth();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Phaser_1setFeedback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Phaser *arg1 = (Phaser *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Phaser **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setFeedback(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Phaser_1getFeedback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Phaser *arg1 = (Phaser *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Phaser **)&jarg1; 
  result = (float)(arg1)->getFeedback();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Phaser_1setRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Phaser *arg1 = (Phaser *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Phaser **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setRate(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Phaser_1getRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Phaser *arg1 = (Phaser *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Phaser **)&jarg1; 
  result = (float)(arg1)->getRate();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Phaser_1setRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  Phaser *arg1 = (Phaser *) 0 ;
  float arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Phaser **)&jarg1; 
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  (arg1)->setRange(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Phaser_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  Phaser *arg1 = (Phaser *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Phaser **)&jarg1; 
  arg2 = *(float **)&jarg2;
  arg3 = (int)jarg3; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_M_1PI_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(3.14159265358979323846);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_MAX_1FRAME_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(8192);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_smbFft(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  float *arg1 = (float *) 0 ;
  long arg2 ;
  long arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  smbFft(arg1,arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_smbAtan2(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jfloat jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  result = (float)smbAtan2(arg1,arg2);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1PitchShifter(JNIEnv *jenv, jclass jcls, jfloat jarg1, jint jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  long arg2 ;
  PitchShifter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (long)jarg2; 
  result = (PitchShifter *)new PitchShifter(arg1,arg2);
  *(PitchShifter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1PitchShifter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PitchShifter *arg1 = (PitchShifter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PitchShifter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_PitchShifter_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  PitchShifter *arg1 = (PitchShifter *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PitchShifter **)&jarg1; 
  arg2 = *(float **)&jarg2;
  arg3 = (int)jarg3; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_PitchShifter_1pitchShift_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  PitchShifter *arg1 = (PitchShifter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PitchShifter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->pitchShift = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_PitchShifter_1pitchShift_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  PitchShifter *arg1 = (PitchShifter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PitchShifter **)&jarg1; 
  result = (float) ((arg1)->pitchShift);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1ProcessingChain(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ProcessingChain *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ProcessingChain *)new ProcessingChain();
  *(ProcessingChain **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1ProcessingChain(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProcessingChain **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1fmActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fmActive = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1fmActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (bool) ((arg1)->fmActive);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1fm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  FrequencyModulator *arg2 = (FrequencyModulator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = *(FrequencyModulator **)&jarg2; 
  if (arg1) (arg1)->fm = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1fm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  FrequencyModulator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (FrequencyModulator *) ((arg1)->fm);
  *(FrequencyModulator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1filterCutoff_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->filterCutoff = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1filterCutoff_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->filterCutoff);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1filterResonance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->filterResonance = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1filterResonance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->filterResonance);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1filterActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->filterActive = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1filterActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (bool) ((arg1)->filterActive);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1filter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  Filter *arg2 = (Filter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = *(Filter **)&jarg2; 
  if (arg1) (arg1)->filter = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1filter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  Filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (Filter *) ((arg1)->filter);
  *(Filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1filterFormant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->filterFormant = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1filterFormant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->filterFormant);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1formantActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->formantActive = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1formantActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (bool) ((arg1)->formantActive);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1formant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  FormantFilter *arg2 = (FormantFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = *(FormantFilter **)&jarg2; 
  if (arg1) (arg1)->formant = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1formant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  FormantFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (FormantFilter *) ((arg1)->formant);
  *(FormantFilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1phaserRate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->phaserRate = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1phaserRate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->phaserRate);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1phaserFeedback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->phaserFeedback = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1phaserFeedback_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->phaserFeedback);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1phaserDepth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->phaserDepth = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1phaserDepth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->phaserDepth);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1phaserActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->phaserActive = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1phaserActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (bool) ((arg1)->phaserActive);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1phaser_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  Phaser *arg2 = (Phaser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = *(Phaser **)&jarg2; 
  if (arg1) (arg1)->phaser = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1phaser_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  Phaser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (Phaser *) ((arg1)->phaser);
  *(Phaser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1distortion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->distortion = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1distortion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->distortion);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1distortionLevel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->distortionLevel = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1distortionLevel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->distortionLevel);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1waveshaperActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->waveshaperActive = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1waveshaperActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (bool) ((arg1)->waveshaperActive);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1waveShaper_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  WaveShaper *arg2 = (WaveShaper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = *(WaveShaper **)&jarg2; 
  if (arg1) (arg1)->waveShaper = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1waveShaper_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  WaveShaper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (WaveShaper *) ((arg1)->waveShaper);
  *(WaveShaper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1bitCrusherActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bitCrusherActive = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1bitCrusherActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (bool) ((arg1)->bitCrusherActive);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1bitCrusher_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  BitCrusher *arg2 = (BitCrusher *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = *(BitCrusher **)&jarg2; 
  if (arg1) (arg1)->bitCrusher = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1bitCrusher_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  BitCrusher *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (BitCrusher *) ((arg1)->bitCrusher);
  *(BitCrusher **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1decimatorDistortion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->decimatorDistortion = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1decimatorDistortion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->decimatorDistortion);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1decimatorDistortionLevel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->decimatorDistortionLevel = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1decimatorDistortionLevel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->decimatorDistortionLevel);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1decimatorActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->decimatorActive = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1decimatorActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (bool) ((arg1)->decimatorActive);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1decimator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  Decimator *arg2 = (Decimator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = *(Decimator **)&jarg2; 
  if (arg1) (arg1)->decimator = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1decimator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  Decimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (Decimator *) ((arg1)->decimator);
  *(Decimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1delayTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->delayTime = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1delayTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->delayTime);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1delayMix_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->delayMix = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1delayMix_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->delayMix);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1delayFeedback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->delayFeedback = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1delayFeedback_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->delayFeedback);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1delayActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->delayActive = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1delayActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (bool) ((arg1)->delayActive);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1delay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  Delay *arg2 = (Delay *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = *(Delay **)&jarg2; 
  if (arg1) (arg1)->delay = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1delay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  Delay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (Delay *) ((arg1)->delay);
  *(Delay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1cAttack_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->cAttack = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1cAttack_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->cAttack);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1cRelease_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->cRelease = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1cRelease_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->cRelease);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1cThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->cThreshold = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1cThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->cThreshold);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1cGain_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->cGain = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1cGain_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->cGain);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1cRatio_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->cRatio = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1cRatio_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->cRatio);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1compressorActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->compressorActive = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1compressorActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (bool) ((arg1)->compressorActive);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1compressor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  Compressor *arg2 = (Compressor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = *(Compressor **)&jarg2; 
  if (arg1) (arg1)->compressor = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1compressor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  Compressor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (Compressor *) ((arg1)->compressor);
  *(Compressor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1pitchShifter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  PitchShifter *arg2 = (PitchShifter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = *(PitchShifter **)&jarg2; 
  if (arg1) (arg1)->pitchShifter = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1pitchShifter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  PitchShifter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (PitchShifter *) ((arg1)->pitchShifter);
  *(PitchShifter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1lpfCutoff_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->lpfCutoff = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1lpfCutoff_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->lpfCutoff);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1hpfCutoff_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->hpfCutoff = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1hpfCutoff_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (float) ((arg1)->hpfCutoff);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1lpfHpfActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->lpfHpfActive = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1lpfHpfActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (bool) ((arg1)->lpfHpfActive);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1lpfhpf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  LPFHPFilter *arg2 = (LPFHPFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = *(LPFHPFilter **)&jarg2; 
  if (arg1) (arg1)->lpfhpf = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1lpfhpf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  LPFHPFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (LPFHPFilter *) ((arg1)->lpfhpf);
  *(LPFHPFilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1getActiveProcessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  SwigValueWrapper< std::vector< BaseProcessor * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (arg1)->getActiveProcessors();
  *(std::vector< BaseProcessor * > **)&jresult = new std::vector< BaseProcessor * >((const std::vector< BaseProcessor * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1getActiveBusProcessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  SwigValueWrapper< std::vector< BaseBusProcessor * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (arg1)->getActiveBusProcessors();
  *(std::vector< BaseBusProcessor * > **)&jresult = new std::vector< BaseBusProcessor * >((const std::vector< BaseBusProcessor * > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1cacheActiveProcessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  (arg1)->cacheActiveProcessors();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_ProcessingChain_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1RouteableOscillator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RouteableOscillator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RouteableOscillator *)new RouteableOscillator();
  *(RouteableOscillator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1RouteableOscillator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RouteableOscillator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_RouteableOscillator_1destination_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->destination = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_RouteableOscillator_1destination_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  result = (int) ((arg1)->destination);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_RouteableOscillator_1speed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->speed = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_RouteableOscillator_1speed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  result = (float) ((arg1)->speed);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_RouteableOscillator_1wave_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->wave = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_RouteableOscillator_1wave_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  result = (int) ((arg1)->wave);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_RouteableOscillator_1linkOscillator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  (arg1)->linkOscillator();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_RouteableOscillator_1unlinkOscillator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  (arg1)->unlinkOscillator();
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_RouteableOscillator_1isLinked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  result = (bool)(arg1)->isLinked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_RouteableOscillator_1getLinkedOscillator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  LFO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  result = (LFO *)(arg1)->getLinkedOscillator();
  *(LFO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_cachedSample_1sampleLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cachedSample *arg1 = (cachedSample *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cachedSample **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sampleLength = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_cachedSample_1sampleLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cachedSample *arg1 = (cachedSample *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cachedSample **)&jarg1; 
  result = (int) ((arg1)->sampleLength);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_cachedSample_1sampleBuffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cachedSample *arg1 = (cachedSample *) 0 ;
  float *arg2 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cachedSample **)&jarg1; 
  arg2 = *(float **)&jarg2;
  if (arg1) (arg1)->sampleBuffer = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_cachedSample_1sampleBuffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cachedSample *arg1 = (cachedSample *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cachedSample **)&jarg1; 
  result = (float *) ((arg1)->sampleBuffer);
  *(float **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1cachedSample(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cachedSample *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cachedSample *)new cachedSample();
  *(cachedSample **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1cachedSample(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cachedSample *arg1 = (cachedSample *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cachedSample **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleManager_1setSample_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  std::string arg1 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  std::string *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::string **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg1 = *argp1; 
  arg2 = *(float **)&jarg2;
  arg3 = (int)jarg3; 
  SampleManager::setSample(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleManager_1setSample_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jfloatArray jarg2, jint jarg3) {
  jstring arg1 ;
  jfloatArray arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  SampleManager::setSample(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleManager_1getSample(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string *argp1 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::string **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return 0;
  }
  arg1 = *argp1; 
  result = (float *)SampleManager::getSample(arg1);
  *(float **)&jresult = result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleManager_1getSampleLength(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  std::string *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::string **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return 0;
  }
  arg1 = *argp1; 
  result = (int)SampleManager::getSampleLength(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleManager_1hasSample(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  std::string arg1 ;
  std::string *argp1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::string **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return 0;
  }
  arg1 = *argp1; 
  result = (bool)SampleManager::hasSample(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleManager_1removeSample(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::string arg1 ;
  std::string *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::string **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg1 = *argp1; 
  SampleManager::removeSample(arg1);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleManager_1flushSamples(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  SampleManager::flushSamples();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1SampleManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SampleManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SampleManager *)new SampleManager();
  *(SampleManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1SampleManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SampleManager *arg1 = (SampleManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI__1sampleMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,cachedSample > *arg1 = (std::map< std::string,cachedSample > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,cachedSample > **)&jarg1; 
  SampleManagerSamples::_sampleMap = *arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI__1sampleMap_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,cachedSample > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,cachedSample > *)&SampleManagerSamples::_sampleMap;
  *(std::map< std::string,cachedSample > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1SynthInstrument(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SynthInstrument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SynthInstrument *)new SynthInstrument();
  *(SynthInstrument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1SynthInstrument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SynthInstrument **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1waveform_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->waveform = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1waveform_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (int) ((arg1)->waveform);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1octave_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->octave = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1octave_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (int) ((arg1)->octave);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1keyboardOctave_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->keyboardOctave = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1keyboardOctave_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (int) ((arg1)->keyboardOctave);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1attack_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->attack = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1attack_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (float) ((arg1)->attack);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1release_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->release = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1release_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (float) ((arg1)->release);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->volume = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (float) ((arg1)->volume);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1keyboardVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->keyboardVolume = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1keyboardVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (float) ((arg1)->keyboardVolume);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1rOsc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  RouteableOscillator *arg2 = (RouteableOscillator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = *(RouteableOscillator **)&jarg2; 
  if (arg1) (arg1)->rOsc = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1rOsc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  RouteableOscillator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (RouteableOscillator *) ((arg1)->rOsc);
  *(RouteableOscillator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1processingChain_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  ProcessingChain *arg2 = (ProcessingChain *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = *(ProcessingChain **)&jarg2; 
  if (arg1) (arg1)->processingChain = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1processingChain_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  ProcessingChain *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (ProcessingChain *) ((arg1)->processingChain);
  *(ProcessingChain **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1audioChannel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  AudioChannel *arg2 = (AudioChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = *(AudioChannel **)&jarg2; 
  if (arg1) (arg1)->audioChannel = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1audioChannel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  AudioChannel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (AudioChannel *) ((arg1)->audioChannel);
  *(AudioChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1osc2active_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->osc2active = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1osc2active_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (bool) ((arg1)->osc2active);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1osc2waveform_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->osc2waveform = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1osc2waveform_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (int) ((arg1)->osc2waveform);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1osc2detune_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->osc2detune = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1osc2detune_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (float) ((arg1)->osc2detune);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1osc2octaveShift_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->osc2octaveShift = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1osc2octaveShift_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (int) ((arg1)->osc2octaveShift);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1osc2fineShift_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->osc2fineShift = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1osc2fineShift_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (int) ((arg1)->osc2fineShift);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1audioEvents_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  std::vector< BaseCacheableAudioEvent * > *arg2 = (std::vector< BaseCacheableAudioEvent * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = *(std::vector< BaseCacheableAudioEvent * > **)&jarg2; 
  if (arg1) (arg1)->audioEvents = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1audioEvents_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  std::vector< BaseCacheableAudioEvent * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (std::vector< BaseCacheableAudioEvent * > *) ((arg1)->audioEvents);
  *(std::vector< BaseCacheableAudioEvent * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1liveEvents_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  std::vector< BaseAudioEvent * > *arg2 = (std::vector< BaseAudioEvent * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = *(std::vector< BaseAudioEvent * > **)&jarg2; 
  if (arg1) (arg1)->liveEvents = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthInstrument_1liveEvents_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  std::vector< BaseAudioEvent * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (std::vector< BaseAudioEvent * > *) ((arg1)->liveEvents);
  *(std::vector< BaseAudioEvent * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1SynthEvent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jint jarg2, jfloat jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jlong jresult = 0 ;
  float arg1 ;
  int arg2 ;
  float arg3 ;
  SynthInstrument *arg4 = (SynthInstrument *) 0 ;
  bool arg5 ;
  SynthEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (float)jarg1;
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3;
  arg4 = *(SynthInstrument **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (SynthEvent *)new SynthEvent(arg1,arg2,arg3,arg4,arg5);
  *(SynthEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1SynthEvent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jint jarg2, jfloat jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  float arg1 ;
  int arg2 ;
  float arg3 ;
  SynthInstrument *arg4 = (SynthInstrument *) 0 ;
  bool arg5 ;
  bool arg6 ;
  SynthEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (float)jarg1;
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3;
  arg4 = *(SynthInstrument **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (SynthEvent *)new SynthEvent(arg1,arg2,arg3,arg4,arg5,arg6);
  *(SynthEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1SynthEvent_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  float arg1 ;
  SynthInstrument *arg2 = (SynthInstrument *) 0 ;
  SynthEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (float)jarg1;
  arg2 = *(SynthInstrument **)&jarg2; 
  result = (SynthEvent *)new SynthEvent(arg1,arg2);
  *(SynthEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1SynthEvent_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jfloat jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  SynthInstrument *arg2 = (SynthInstrument *) 0 ;
  bool arg3 ;
  SynthEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (float)jarg1;
  arg2 = *(SynthInstrument **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (SynthEvent *)new SynthEvent(arg1,arg2,arg3);
  *(SynthEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1SynthEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SynthEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1VOLUME_1CORRECTION_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)SynthEvent::VOLUME_CORRECTION;
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1liveSynthesis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->liveSynthesis = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1liveSynthesis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  result = (bool) ((arg1)->liveSynthesis);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->position = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  result = (int) ((arg1)->position);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  arg2 = (float)jarg2;
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  result = (float) ((arg1)->length);
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1getFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  result = (float)(arg1)->getFrequency();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1setFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setFrequency(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1updateProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  int arg2 ;
  float arg3 ;
  SynthInstrument *arg4 = (SynthInstrument *) 0 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(SynthEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3;
  arg4 = *(SynthInstrument **)&jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->updateProperties(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1calculateBuffers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  (arg1)->calculateBuffers();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1cache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->cache(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1getAttack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  result = (float)(arg1)->getAttack();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1setAttack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setAttack(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1getDecay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  result = (int)(arg1)->getDecay();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1setDecay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDecay(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1getRelease(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  result = (float)(arg1)->getRelease();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1setRelease(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setRelease(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1getVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  result = (float)(arg1)->getVolume();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1setVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setVolume(arg2);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1getBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  result = (float *)(arg1)->getBuffer();
  *(float **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1synthesize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float *)(arg1)->synthesize(arg2);
  *(float **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthEvent **)&jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_new_1WaveShaper(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  WaveShaper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  result = (WaveShaper *)new WaveShaper(arg1,arg2);
  *(WaveShaper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_WaveShaper_1getAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  WaveShaper *arg1 = (WaveShaper *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WaveShaper **)&jarg1; 
  result = (float)(arg1)->getAmount();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_WaveShaper_1setAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  WaveShaper *arg1 = (WaveShaper *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WaveShaper **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setAmount(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_WaveShaper_1getLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  WaveShaper *arg1 = (WaveShaper *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WaveShaper **)&jarg1; 
  result = (float)(arg1)->getLevel();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_WaveShaper_1setLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  WaveShaper *arg1 = (WaveShaper *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WaveShaper **)&jarg1; 
  arg2 = (float)jarg2;
  (arg1)->setLevel(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_WaveShaper_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  WaveShaper *arg1 = (WaveShaper *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WaveShaper **)&jarg1; 
  arg2 = *(float **)&jarg2;
  arg3 = (int)jarg3; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_delete_1WaveShaper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WaveShaper *arg1 = (WaveShaper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaveShaper **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BaseCacheableAudioEvent_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseAudioEvent **)&baseptr = *(BaseCacheableAudioEvent **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_BitCrusher_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(BitCrusher **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Compressor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(Compressor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Decimator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(Decimator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SampleEvent_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseCacheableAudioEvent **)&baseptr = *(SampleEvent **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_DrumEvent_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SampleEvent **)&baseptr = *(DrumEvent **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Delay_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseBusProcessor **)&baseptr = *(Delay **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Filter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(Filter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_FrequencyModulator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(FrequencyModulator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_FormantFilter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(FormantFilter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_Phaser_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(Phaser **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_PitchShifter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(PitchShifter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_SynthEvent_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseCacheableAudioEvent **)&baseptr = *(SynthEvent **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_nativeaudio_NativeAudioEngineJNI_WaveShaper_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(WaveShaper **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

